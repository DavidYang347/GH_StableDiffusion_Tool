using System;
using System.Collections.Generic;
using System.Diagnostics;
using System.Drawing;
using System.IO;
using System.Windows.Forms;
using Ambrosinus_Toolkit.Functions;
using Ambrosinus_Toolkit.Properties;
using Grasshopper.Kernel;
using Grasshopper.Kernel.Special;

namespace Ambrosinus_Toolkit.AIComps
{
    // Token: 0x02000024 RID: 36
    public class SdINinfoV2Component : GH_Component
    {
        // Token: 0x0600016B RID: 363 RVA: 0x0000C56E File Offset: 0x0000A76E
        public SdINinfoV2Component() : base("SD-INinfo", "LA_SD-INinfo", "Read settings info from the filename of the image generated by 'LA_StabilityAI-GH' - it can reinstate seed value from filename\nby Luciano Ambrosini", "Ambrosinus", "3.AI")
        {
        }

        // Token: 0x0600016C RID: 364 RVA: 0x0000C590 File Offset: 0x0000A790
        protected override void RegisterInputParams(GH_Component.GH_InputParamManager pManager)
        {
            pManager.AddTextParameter("output", "output", "Pass 'output' string one-by-one from LA_StabilityAI-GH component as input", 0);
            pManager.AddBooleanParameter("hideLinks", "hideLinks", "hide BaseIMG and MaskIMG links in the output", 0);
            pManager.AddBooleanParameter("reinstate", "reinstate", "reinstate the seed value in a 'number slider' called 'SAI-Seed'", 0);
            pManager[0].MutableNickName = false;
            pManager[1].MutableNickName = false;
            pManager[2].MutableNickName = false;
        }

        // Token: 0x0600016D RID: 365 RVA: 0x0000C60C File Offset: 0x0000A80C
        protected override void RegisterOutputParams(GH_Component.GH_OutputParamManager pManager)
        {
            pManager.AddTextParameter("INinfo", "INinfo", "shows all settings parameters grabbed from the output filename", 0);
            pManager.AddIntegerParameter("Seed", "Seed", "Seed value from filename", 0);
            pManager[0].MutableNickName = false;
            pManager[1].MutableNickName = false;
        }

        // Token: 0x0600016E RID: 366 RVA: 0x0000C661 File Offset: 0x0000A861
        protected override void BeforeSolveInstance()
        {
            base.BeforeSolveInstance();
            base.MutableNickName = false;
        }

        // Token: 0x0600016F RID: 367 RVA: 0x0000C670 File Offset: 0x0000A870
        protected override void AppendAdditionalComponentMenuItems(ToolStripDropDown menu)
        {
            base.AppendAdditionalComponentMenuItems(menu);
            GH_DocumentObject.Menu_AppendItem(menu, "AmbrosinusDEV Log", new EventHandler(this.Menu_info_DoClick), Resources.Ambrosinus_DEV_logo_24);
            GH_DocumentObject.Menu_AppendItem(menu, "Project Info", new EventHandler(this.Menu_A_DoClick), Resources.resprj_logo1_24);
            GH_DocumentObject.Menu_AppendItem(menu, "About StabilityAI-GH", new EventHandler(this.Menu_B_DoClick), Resources.comps_logo1_24);
        }

        // Token: 0x06000170 RID: 368 RVA: 0x0000C6DC File Offset: 0x0000A8DC
        private void Menu_info_DoClick(object sender, EventArgs e)
        {
            if (this.myMenu_info = !this.myMenu_info)
            {
                Process.Start("https://ambrosinus.altervista.org/blog/ambrosinus-toolkit/");
            }
        }

        // Token: 0x06000171 RID: 369 RVA: 0x0000C708 File Offset: 0x0000A908
        private void Menu_A_DoClick(object sender, EventArgs e)
        {
            if (this.myMenu_A = !this.myMenu_A)
            {
                Process.Start("https://ambrosinus.altervista.org/blog/atoolkit-research-project/");
            }
        }

        // Token: 0x06000172 RID: 370 RVA: 0x0000C734 File Offset: 0x0000A934
        private void Menu_B_DoClick(object sender, EventArgs e)
        {
            if (this.myMenu_B = !this.myMenu_B)
            {
                Process.Start("https://ambrosinus.altervista.org/blog/stabilityai-stable-diffusion-inside-grasshopper-with-python/");
            }
        }

        // Token: 0x06000173 RID: 371 RVA: 0x0000C760 File Offset: 0x0000A960
        protected override void SolveInstance(IGH_DataAccess DA)
        {
            string text = "";
            if (!DA.GetData<string>(0, ref text))
            {
                this.AddRuntimeMessage((GH_RuntimeMessageLevel)10, "Please, run LA_StabilityAI-GH component and give its image-full-path output to a 'List item'\nand then as input of this component!");
                return;
            }
            bool flag = false;
            if (!DA.GetData<bool>(1, ref flag))
            {
                return;
            }
            bool flag2 = false;
            if (!DA.GetData<bool>(2, ref flag2))
            {
                return;
            }
            List<string> list = new List<string>
            {
                "SDv10",
                "SDv15",
                "SD512v20",
                "SD768v20",
                "SD512v21",
                "SD768v21",
                "SInPv10",
                "SInPv20"
            };
            List<string> list2 = new List<string>
            {
                "stable-diffusion-v1",
                "stable-diffusion-v1-5",
                "stable-diffusion-512-v2-0",
                "stable-diffusion-768-v2-0",
                "stable-diffusion-512-v2-1",
                "stable-diffusion-768-v2-1",
                "stable-inpainting-v1-0",
                "stable-inpainting-512-v2-0"
            };
            List<string> list3 = new List<string>
            {
                "ddim",
                "ddpm",
                "k-dpm-2",
                "k-dpm-2-ancestral",
                "k-dpmpp-2m",
                "k-dpmpp-s2-ancestral",
                "k-euler",
                "k-euler-ancestral",
                "k-heun",
                "k-lms"
            };
            List<string> list4 = new List<string>
            {
                "DDIM",
                "DDPM",
                "K_DPM_2",
                "K_DPM_2_ANCESTRAL",
                "K_DPMPP_2M",
                "K_DPMPP_S2_ANCESTRAL",
                "K_EULER",
                "K_EULER_ANCESTRAL",
                "K_HEUN",
                "K_LMS"
            };
            string text2 = "";
            string text3 = "";
            string text4 = text;
            decimal num = 0m;
            int num2 = 15;
            int num3 = 13;
            string fileNameWithoutExtension = Path.GetFileNameWithoutExtension(text4);
            char c = '_';
            string[] array = fileNameWithoutExtension.Split(new char[]
            {
                c
            }, StringSplitOptions.RemoveEmptyEntries);
            if (text4 == null || array.Length == 0 || text4 == "Ask me something, I will surprise you! ;)" || (array[0] != "St0" && array[0] != "St1" && array[0] != "St2"))
            {
                this.AddRuntimeMessage((GH_RuntimeMessageLevel)10, "Please, run the latest StabilityAI component and give its image-full-path output as input!");
                return;
            }
            string arg = CustomFX.UnixTimeStampToDateTime(Convert.ToDouble(array[2])).ToString();
            string text5 = string.Format("Created: {0}", arg);
            char c2 = 'x';
            string[] array2 = array[3].Split(new char[]
            {
                c2
            }, StringSplitOptions.RemoveEmptyEntries);
            string text6 = string.Format("H: {0}", array2[0].Remove(0, 1));
            string text7 = string.Format("W: {0}", array2[1].Remove(0, 1));
            string text14;
            int num4;
            if (array[0].Substring(0, 3) == "St0")
            {
                string text8 = string.Format("Mode: {0}", "Text-to-Image");
                string text9 = string.Format("Cfg scale: {0}", array[4].Remove(0, 3));
                string text10 = string.Format("Step: {0}", array[5].Remove(0, 3));
                string text11 = string.Format("Image number: {0}", array[6].Remove(0, 1));
                string a = array[7].Remove(0, 3);
                for (int i = 0; i < 8; i++)
                {
                    if (a == list[i])
                    {
                        text2 = string.Format("Engine: {0}", list2[i]);
                    }
                }
                string a2 = array[8].Remove(0, 5);
                for (int j = 0; j < 10; j++)
                {
                    if (a2 == list3[j])
                    {
                        text3 = string.Format("Sampler: {0}", list4[j]);
                    }
                }
                string text12 = string.Format("Seed: {0}", array[9].Remove(0, 4));
                string text13 = string.Format("Clip Guidance: {0}", array[10].Remove(0, 5));
                text14 = string.Concat(new string[]
                {
                    text5,
                    "\n",
                    text6,
                    "\n",
                    text7,
                    "\n",
                    text8,
                    "\n",
                    text9,
                    "\n",
                    text10,
                    "\n",
                    text11,
                    "\n",
                    text2,
                    "\n",
                    text3,
                    "\n",
                    text12,
                    "\n",
                    text13,
                    "\n\n"
                });
                num = Convert.ToDecimal(array[9].Remove(0, 4));
                num4 = Convert.ToInt32(string.Format("{0:F0}", num));
            }
            else if (array[0].Substring(0, 3) == "St1")
            {
                string text15 = string.Format("Mode: {0}", "Image-to-Image");
                string text16 = string.Format("Strength: {0}", array[4].Remove(0, 3));
                string text17 = string.Format("Cfg scale: {0}", array[5].Remove(0, 3));
                string text18 = string.Format("Step: {0}", array[6].Remove(0, 3));
                string text19 = string.Format("Image number: {0}", array[7].Remove(0, 1));
                string a = array[8].Remove(0, 3);
                for (int k = 0; k < 8; k++)
                {
                    if (a == list[k])
                    {
                        text2 = string.Format("Engine: {0}", list2[k]);
                    }
                }
                string a2 = array[9].Remove(0, 5);
                for (int l = 0; l < 10; l++)
                {
                    if (a2 == list3[l])
                    {
                        text3 = string.Format("Sampler: {0}", list4[l]);
                    }
                }
                string directoryName = Path.GetDirectoryName(text4);
                int startIndex = directoryName.Length - 1 - 4;
                string text20 = directoryName.Remove(startIndex, 5) + "\\TXTs\\" + fileNameWithoutExtension + ".txt";
                string text21;
                string text22;
                if (!File.Exists(text20))
                {
                    text21 = string.Format("Base img: {0}", "Not found");
                    text22 = string.Format("Mask img: {0}", "Not found");
                }
                else if (File.Exists(text20) && !flag)
                {
                    int num5 = File.ReadAllLines(text20).Length;
                    int line = num5 - num2;
                    int line2 = num5 - num3;
                    text21 = CustomFX.GetLine(text20, line);
                    text22 = CustomFX.GetLine(text20, line2);
                }
                else
                {
                    text21 = string.Format("Base img: {0}", "**hidden**");
                    text22 = string.Format("Mask img: {0}", "**hidden**");
                }
                string text23 = string.Format("Seed: {0}", array[10].Remove(0, 4));
                string text24 = string.Format("Clip Guidance: {0}", array[11].Remove(0, 5));
                text14 = string.Concat(new string[]
                {
                    text5,
                    "\n",
                    text6,
                    "\n",
                    text7,
                    "\n",
                    text15,
                    "\n",
                    text21,
                    "\n",
                    text16,
                    "\n",
                    text22,
                    "\n",
                    text17,
                    "\n",
                    text18,
                    "\n",
                    text19,
                    "\n",
                    text2,
                    "\n",
                    text3,
                    "\n",
                    text23,
                    "\n",
                    text24,
                    "\n\n"
                });
                num = Convert.ToDecimal(array[10].Remove(0, 4));
                num4 = Convert.ToInt32(string.Format("{0:F0}", num));
            }
            else
            {
                if (!(array[0].Substring(0, 3) == "St2"))
                {
                    this.AddRuntimeMessage((GH_RuntimeMessageLevel)10, "The filename format has not been generated from LA_StabilityAI-GH component build-102 or above\nPlease, generate a new image by the component with the correct build\nor pass a different path in DirPath!");
                    return;
                }
                string text25 = string.Format("Mode: {0}", "Text-to-Image Mask");
                string text26 = string.Format("Strength: {0}", array[4].Remove(0, 3));
                string text27 = string.Format("Cfg scale: {0}", array[5].Remove(0, 3));
                string text28 = string.Format("Step: {0}", array[6].Remove(0, 3));
                string text29 = string.Format("Image number: {0}", array[7].Remove(0, 1));
                string a = array[8].Remove(0, 3);
                for (int m = 0; m < 8; m++)
                {
                    if (a == list[m])
                    {
                        text2 = string.Format("Engine: {0}", list2[m]);
                    }
                }
                string a2 = array[9].Remove(0, 5);
                for (int n = 0; n < 10; n++)
                {
                    if (a2 == list3[n])
                    {
                        text3 = string.Format("Sampler: {0}", list4[n]);
                    }
                }
                string directoryName2 = Path.GetDirectoryName(text4);
                int startIndex2 = directoryName2.Length - 1 - 4;
                string text30 = directoryName2.Remove(startIndex2, 5) + "\\TXTs\\" + fileNameWithoutExtension + ".txt";
                string text31;
                string text32;
                if (!File.Exists(text30))
                {
                    text31 = string.Format("Base img: {0}", "Not found");
                    text32 = string.Format("Mask img: {0}", "Not found");
                }
                else if (File.Exists(text30) && !flag)
                {
                    int num6 = File.ReadAllLines(text30).Length;
                    int line3 = num6 - num2;
                    int line4 = num6 - num3;
                    text31 = CustomFX.GetLine(text30, line3);
                    text32 = CustomFX.GetLine(text30, line4);
                }
                else
                {
                    text31 = string.Format("Base img: {0}", "**hidden**");
                    text32 = string.Format("Mask img: {0}", "**hidden**");
                }
                string text33 = string.Format("Seed: {0}", array[10].Remove(0, 4));
                string text34 = string.Format("Clip Guidance: {0}", array[11].Remove(0, 5));
                text14 = string.Concat(new string[]
                {
                    text5,
                    "\n",
                    text6,
                    "\n",
                    text7,
                    "\n",
                    text25,
                    "\n",
                    text31,
                    "\n",
                    text26,
                    "\n",
                    text32,
                    "\n",
                    text27,
                    "\n",
                    text28,
                    "\n",
                    text29,
                    "\n",
                    text2,
                    "\n",
                    text3,
                    "\n",
                    text33,
                    "\n",
                    text34,
                    "\n\n"
                });
                num = Convert.ToDecimal(array[10].Remove(0, 4));
                num4 = Convert.ToInt32(string.Format("{0:F0}", num));
            }
            DA.SetData(0, text14);
            DA.SetData(1, num4);
            string name = "SAI-Seed";
            GH_NumberSlider gh_NumberSlider = (GH_NumberSlider)CustomFX.FindObj(base.OnPingDocument(), name, null);
            if (gh_NumberSlider == null)
            {
                this.AddRuntimeMessage((GH_RuntimeMessageLevel)10, "Please, assign to LA_StabilityAI-GH component\na Seed-slider with 'SAI-Seed' as its name!");
                return;
            }
            if (gh_NumberSlider != null && flag2)
            {
                gh_NumberSlider.Slider.Minimum = 0m;
                gh_NumberSlider.Slider.Maximum = num;
                gh_NumberSlider.Slider.FixDomain();
                gh_NumberSlider.TrySetSliderValue(num);
                return;
            }
            gh_NumberSlider.Slider.DrawControlBackground = true;
            gh_NumberSlider.Slider.DrawControlBorder = true;
            gh_NumberSlider.Slider.ControlEdgeColour = Color.FromArgb(255, 240, 101, 163);
            gh_NumberSlider.Slider.ControlBackColour = Color.Gold;
        }

        // Token: 0x17000086 RID: 134
        // (get) Token: 0x06000174 RID: 372 RVA: 0x0000D344 File Offset: 0x0000B544
        public override GH_Exposure Exposure
        {
            get
            {
                return (GH_Exposure)2;
            }
        }

        // Token: 0x17000087 RID: 135
        // (get) Token: 0x06000175 RID: 373 RVA: 0x0000D347 File Offset: 0x0000B547
        protected override Bitmap Icon
        {
            get
            {
                return Resources.StabAI_INinfo_icon1_24;
            }
        }

        // Token: 0x17000088 RID: 136
        // (get) Token: 0x06000176 RID: 374 RVA: 0x0000D34E File Offset: 0x0000B54E
        public override Guid ComponentGuid
        {
            get
            {
                return new Guid("d26e1534-e039-4ac9-a557-f49c8f378d8a");
            }
        }

        // Token: 0x04000055 RID: 85
        public bool myMenu_info;

        // Token: 0x04000056 RID: 86
        public bool myMenu_A;

        // Token: 0x04000057 RID: 87
        public bool myMenu_B;
    }
}
