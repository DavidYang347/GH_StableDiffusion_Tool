using System;
using System.Diagnostics;
using System.Drawing;
using System.Drawing.Imaging;
using System.IO;
using System.Linq;
using System.Text;
using System.Windows.Forms;
using Ambrosinus_Toolkit.Properties;
using Grasshopper.Kernel;

namespace Ambrosinus_Toolkit.AIComps
{
    // Token: 0x0200001E RID: 30
    public class AIimgINinfoComponent : GH_Component
    {
        // Token: 0x0600011C RID: 284 RVA: 0x0000A712 File Offset: 0x00008912
        public AIimgINinfoComponent() : base("SD-Imginfo", "LA_SD-Imginfo", "Read settings info from the image file generated by 'AIeNG_loc'\nby Luciano Ambrosini", "Ambrosinus", "3.AI")
        {
        }

        // Token: 0x0600011D RID: 285 RVA: 0x0000A733 File Offset: 0x00008933
        protected override void RegisterInputParams(GH_Component.GH_InputParamManager pManager)
        {
            pManager.AddTextParameter("imgPath", "imgPath", "Pass an image path as input", 0, "VOID");
            pManager[0].MutableNickName = false;
        }

        // Token: 0x0600011E RID: 286 RVA: 0x0000A75E File Offset: 0x0000895E
        protected override void RegisterOutputParams(GH_Component.GH_OutputParamManager pManager)
        {
            pManager.AddTextParameter("INinfo", "INinfo", "shows all settings parameters grabbed from the image file", 0);
            pManager[0].MutableNickName = false;
        }

        // Token: 0x0600011F RID: 287 RVA: 0x0000A784 File Offset: 0x00008984
        protected override void BeforeSolveInstance()
        {
            base.BeforeSolveInstance();
            base.MutableNickName = false;
        }

        // Token: 0x06000120 RID: 288 RVA: 0x0000A794 File Offset: 0x00008994
        protected override void AppendAdditionalComponentMenuItems(ToolStripDropDown menu)
        {
            base.AppendAdditionalComponentMenuItems(menu);
            GH_DocumentObject.Menu_AppendItem(menu, "AmbrosinusDEV Log", new EventHandler(this.Menu_info_DoClick), Resources.Ambrosinus_DEV_logo_24);
            GH_DocumentObject.Menu_AppendItem(menu, "Project Info", new EventHandler(this.Menu_A_DoClick), Resources.resprj_logo1_24);
            GH_DocumentObject.Menu_AppendItem(menu, "About SD locally", new EventHandler(this.Menu_B_DoClick), Resources.comps_logo1_24);
            GH_DocumentObject.Menu_AppendItem(menu, "Requirements", new EventHandler(this.Menu_C_DoClick), Resources.requirem_logo1_24);
        }

        // Token: 0x06000121 RID: 289 RVA: 0x0000A81C File Offset: 0x00008A1C
        private void Menu_info_DoClick(object sender, EventArgs e)
        {
            if (this.myMenu_info = !this.myMenu_info)
            {
                Process.Start("https://ambrosinus.altervista.org/blog/ambrosinus-toolkit/");
            }
        }

        // Token: 0x06000122 RID: 290 RVA: 0x0000A848 File Offset: 0x00008A48
        private void Menu_A_DoClick(object sender, EventArgs e)
        {
            if (this.myMenu_A = !this.myMenu_A)
            {
                Process.Start("https://ambrosinus.altervista.org/blog/atoolkit-research-project/");
            }
        }

        // Token: 0x06000123 RID: 291 RVA: 0x0000A874 File Offset: 0x00008A74
        private void Menu_B_DoClick(object sender, EventArgs e)
        {
            if (this.myMenu_B = !this.myMenu_B)
            {
                Process.Start("https://ambrosinus.altervista.org/blog/ai-as-rendering-eng-sd-controlnet-locally");
            }
        }

        // Token: 0x06000124 RID: 292 RVA: 0x0000A8A0 File Offset: 0x00008AA0
        private void Menu_C_DoClick(object sender, EventArgs e)
        {
            if (this.myMenu_C = !this.myMenu_C)
            {
                Process.Start("https://ambrosinus.altervista.org/blog/ai-as-rendering-eng-sd-controlnet-locally#part1");
            }
        }

        // Token: 0x06000125 RID: 293 RVA: 0x0000A8CC File Offset: 0x00008ACC
        protected override void SolveInstance(IGH_DataAccess DA)
        {
            string text = "VOID";
            if (!DA.GetData<string>(0, ref text))
            {
                this.AddRuntimeMessage((GH_RuntimeMessageLevel)10, "Please, add at least a file image path!");
                return;
            }
            if (text != "VOID")
            {
                string filename = text;
                string text2 = "Not run yet...";
                using (Image image = Image.FromFile(filename))
                {
                    if (image.PropertyIdList.Contains(270))
                    {
                        PropertyItem propertyItem = image.GetPropertyItem(270);
                        text2 = Encoding.UTF8.GetString(propertyItem.Value);
                    }
                    else
                    {
                        text2 = "No text info embedded in image";
                    }
                }
                ImageFormat rawFormat = new Bitmap(text).RawFormat;
                if (text != "VOID" && base.Params.Input[0].SourceCount != 0)
                {
                    FileInfo fileInfo = new FileInfo(text);
                    base.Message = fileInfo.Extension.ToString().ToUpper().Remove(0, 1);
                }
                string text3 = text2;
                DA.SetData(0, text3);
                return;
            }
            base.Message = "...";
            this.AddRuntimeMessage((GH_RuntimeMessageLevel)10, "Please, add at least a file image path!");
        }

        // Token: 0x17000074 RID: 116
        // (get) Token: 0x06000126 RID: 294 RVA: 0x0000A9EC File Offset: 0x00008BEC
        public override GH_Exposure Exposure
        {
            get
            {
                return (GH_Exposure)8;
            }
        }

        // Token: 0x17000075 RID: 117
        // (get) Token: 0x06000127 RID: 295 RVA: 0x0000A9EF File Offset: 0x00008BEF
        protected override Bitmap Icon
        {
            get
            {
                return Resources.SDimginfo_icon1_24;
            }
        }

        // Token: 0x17000076 RID: 118
        // (get) Token: 0x06000128 RID: 296 RVA: 0x0000A9F6 File Offset: 0x00008BF6
        public override Guid ComponentGuid
        {
            get
            {
                return new Guid("3F509D26-DD4C-435A-80A5-4F67E8D741FD");
            }
        }

        // Token: 0x0400003E RID: 62
        public bool myMenu_info;

        // Token: 0x0400003F RID: 63
        public bool myMenu_A;

        // Token: 0x04000040 RID: 64
        public bool myMenu_B;

        // Token: 0x04000041 RID: 65
        public bool myMenu_C;
    }
}
