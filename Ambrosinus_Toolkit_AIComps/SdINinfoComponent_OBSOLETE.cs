using System;
using System.Collections.Generic;
using System.Diagnostics;
using System.Drawing;
using System.IO;
using System.Windows.Forms;
using Ambrosinus_Toolkit.Functions;
using Ambrosinus_Toolkit.Properties;
using Grasshopper.Kernel;
using Grasshopper.Kernel.Special;

namespace Ambrosinus_Toolkit.AIComps
{
    // Token: 0x02000026 RID: 38
    public class SdINinfoComponent_OBSOLETE : GH_Component
    {
        // Token: 0x06000184 RID: 388 RVA: 0x0000DF76 File Offset: 0x0000C176
        public SdINinfoComponent_OBSOLETE() : base("SD-INinfo", "LA_SD-INinfo", "Read settings info from the filename of the image generated by 'LA_StabilityAI-GH' - it can reinstate seed value from filename\nby Luciano Ambrosini", "Ambrosinus", "3.AI")
        {
        }

        // Token: 0x06000185 RID: 389 RVA: 0x0000DF98 File Offset: 0x0000C198
        protected override void RegisterInputParams(GH_Component.GH_InputParamManager pManager)
        {
            pManager.AddTextParameter("output", "output", "Pass 'output' string one-by-one from LA_StabilityAI-GH component as input", 0);
            pManager.AddBooleanParameter("reinstate", "reinstate", "reinstate the seed value in a 'number slider' called 'SAI-Seed'", 0);
            pManager[0].MutableNickName = false;
            pManager[1].MutableNickName = false;
        }

        // Token: 0x06000186 RID: 390 RVA: 0x0000DFF0 File Offset: 0x0000C1F0
        protected override void RegisterOutputParams(GH_Component.GH_OutputParamManager pManager)
        {
            pManager.AddTextParameter("INinfo", "INinfo", "shows all settings parameters grabbed from the output filename", 0);
            pManager.AddIntegerParameter("Seed", "Seed", "Seed value from filename", 0);
            pManager[0].MutableNickName = false;
            pManager[1].MutableNickName = false;
        }

        // Token: 0x06000187 RID: 391 RVA: 0x0000E045 File Offset: 0x0000C245
        protected override void BeforeSolveInstance()
        {
            base.BeforeSolveInstance();
            base.MutableNickName = false;
        }

        // Token: 0x06000188 RID: 392 RVA: 0x0000E054 File Offset: 0x0000C254
        protected override void AppendAdditionalComponentMenuItems(ToolStripDropDown menu)
        {
            base.AppendAdditionalComponentMenuItems(menu);
            GH_DocumentObject.Menu_AppendItem(menu, "AmbrosinusDEV Log", new EventHandler(this.Menu_info_DoClick), Resources.Ambrosinus_DEV_logo_24);
        }

        // Token: 0x06000189 RID: 393 RVA: 0x0000E07C File Offset: 0x0000C27C
        private void Menu_info_DoClick(object sender, EventArgs e)
        {
            if (this.myMenu_info = !this.myMenu_info)
            {
                Process.Start("https://ambrosinus.altervista.org/blog/ambrosinus-toolkit/");
            }
        }

        // Token: 0x0600018A RID: 394 RVA: 0x0000E0A8 File Offset: 0x0000C2A8
        protected override void SolveInstance(IGH_DataAccess DA)
        {
            string path = "";
            if (!DA.GetData<string>(0, ref path))
            {
                this.AddRuntimeMessage((GH_RuntimeMessageLevel)10, "Please, run LA_StabilityAI-GH component and give image-full-path output to a 'List item'\nand then as input of this component!");
                return;
            }
            bool flag = false;
            if (!DA.GetData<bool>(1, ref flag))
            {
                return;
            }
            List<string> list = new List<string>
            {
                "SDv10",
                "SDv15",
                "SD512v20",
                "SD768v20",
                "SD512v21",
                "SD768v21",
                "SInPv10",
                "SInPv20"
            };
            List<string> list2 = new List<string>
            {
                "stable-diffusion-v1",
                "stable-diffusion-v1-5",
                "stable-diffusion-512-v2-0",
                "stable-diffusion-768-v2-0",
                "stable-diffusion-512-v2-1",
                "stable-diffusion-768-v2-1",
                "stable-inpainting-v1-0",
                "stable-inpainting-512-v2-0"
            };
            List<string> list3 = new List<string>
            {
                "ddim",
                "ddpm",
                "k-dpm-2",
                "k-dpm-2-ancestral",
                "k-dpmpp-2m",
                "k-dpmpp-s2-ancestral",
                "k-euler",
                "k-euler-ancestral",
                "k-heun",
                "k-lms"
            };
            List<string> list4 = new List<string>
            {
                "DDIM",
                "DDPM",
                "K_DPM_2",
                "K_DPM_2_ANCESTRAL",
                "K_DPMPP_2M",
                "K_DPMPP_S2_ANCESTRAL",
                "K_EULER",
                "K_EULER_ANCESTRAL",
                "K_HEUN",
                "K_LMS"
            };
            string text = "";
            string text2 = "";
            string fileNameWithoutExtension = Path.GetFileNameWithoutExtension(path);
            char c = '_';
            string[] array = fileNameWithoutExtension.Split(new char[]
            {
                c
            }, StringSplitOptions.RemoveEmptyEntries);
            if (array[6].Substring(0, 3) != "Eng" || array.Length != 9)
            {
                this.AddRuntimeMessage((GH_RuntimeMessageLevel)10, "The filename format has not been generated from LA_StabilityAI-GH component build-102 or above\nPlease, generate a new image by the component with the correct build\nor pass a different path in DirPath!");
                return;
            }
            string arg = CustomFX.UnixTimeStampToDateTime(Convert.ToDouble(array[1])).ToString();
            string text3 = string.Format("Created: {0}", arg);
            char c2 = 'x';
            string[] array2 = array[2].Split(new char[]
            {
                c2
            }, StringSplitOptions.RemoveEmptyEntries);
            string text4 = string.Format("H: {0}", array2[0].Remove(0, 1));
            string text5 = string.Format("W: {0}", array2[1].Remove(0, 1));
            string text6 = string.Format("Cfg scale: {0}", array[3].Remove(0, 3));
            string text7 = string.Format("Step: {0}", array[4].Remove(0, 3));
            string text8 = string.Format("Image number: {0}", array[5].Remove(0, 1));
            string a = array[6].Remove(0, 3);
            for (int i = 0; i < 8; i++)
            {
                if (a == list[i])
                {
                    text = string.Format("Engine: {0}", list2[i]);
                }
            }
            string a2 = array[7].Remove(0, 5);
            for (int j = 0; j < 10; j++)
            {
                if (a2 == list3[j])
                {
                    text2 = string.Format("Sampler: {0}", list4[j]);
                }
            }
            string text9 = string.Format("Seed: {0}", array[8].Remove(0, 4));
            string text10 = string.Concat(new string[]
            {
                text3,
                "\n",
                text4,
                "\n",
                text5,
                "\n",
                text6,
                "\n",
                text7,
                "\n",
                text8,
                "\n",
                text,
                "\n",
                text2,
                "\n",
                text9,
                "\n\n"
            });
            decimal num = Convert.ToDecimal(array[8].Remove(0, 4));
            int num2 = Convert.ToInt32(string.Format("{0:F0}", num));
            DA.SetData(0, text10);
            DA.SetData(1, num2);
            string name = "SAI-Seed";
            GH_NumberSlider gh_NumberSlider = (GH_NumberSlider)CustomFX.FindObj(base.OnPingDocument(), name, null);
            if (gh_NumberSlider == null)
            {
                this.AddRuntimeMessage((GH_RuntimeMessageLevel)10, "Please, assign to LA_StabilityAI-GH component\na Seed-slider with 'SAI-Seed' as its name!");
                return;
            }
            if (gh_NumberSlider != null && flag)
            {
                gh_NumberSlider.Slider.Minimum = 0m;
                gh_NumberSlider.Slider.Maximum = num;
                gh_NumberSlider.Slider.FixDomain();
                gh_NumberSlider.TrySetSliderValue(num);
                return;
            }
            gh_NumberSlider.Slider.DrawControlBackground = true;
            gh_NumberSlider.Slider.DrawControlBorder = true;
            gh_NumberSlider.Slider.ControlEdgeColour = Color.FromArgb(255, 240, 101, 163);
            gh_NumberSlider.Slider.ControlBackColour = Color.Gold;
        }

        // Token: 0x1700008C RID: 140
        // (get) Token: 0x0600018B RID: 395 RVA: 0x0000E5D0 File Offset: 0x0000C7D0
        public override GH_Exposure Exposure
        {
            get
            {
                return (GH_Exposure)(-1);
            }
        }

        // Token: 0x1700008D RID: 141
        // (get) Token: 0x0600018C RID: 396 RVA: 0x0000E5D3 File Offset: 0x0000C7D3
        protected override Bitmap Icon
        {
            get
            {
                return Resources.StabAI_INinfo_icon1_24;
            }
        }

        // Token: 0x1700008E RID: 142
        // (get) Token: 0x0600018D RID: 397 RVA: 0x0000E5DA File Offset: 0x0000C7DA
        public override Guid ComponentGuid
        {
            get
            {
                return new Guid("69E57B87-8559-43A3-A179-4BE494BE56DA");
            }
        }

        // Token: 0x0400005C RID: 92
        public bool myMenu_info;
    }
}
