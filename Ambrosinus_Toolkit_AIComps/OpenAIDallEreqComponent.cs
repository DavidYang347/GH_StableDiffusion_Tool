using System;
using System.Diagnostics;
using System.Drawing;
using System.IO;
using System.Linq.Expressions;
using System.Net;
using System.Reflection;
using System.Runtime.CompilerServices;
using System.Text;
using System.Windows.Forms;
using Ambrosinus_Toolkit.Properties;
using Grasshopper.Kernel;
using Microsoft.CSharp.RuntimeBinder;
using Newtonsoft.Json;
using Binder = Microsoft.CSharp.RuntimeBinder.Binder;

namespace Ambrosinus_Toolkit.AIComps
{
    // Token: 0x02000023 RID: 35
    public class OpenAIDallEreqComponent : GH_Component
    {
        // Token: 0x0600015F RID: 351 RVA: 0x0000BDDA File Offset: 0x00009FDA
        public OpenAIDallEreqComponent() : base("DALLEfromGH", "LA_DALLEfromGH", "Prompt to Image requesting process from Grasshopper component by DALL-E (OpenAI) light version\nby Luciano Ambrosini", "Ambrosinus", "3.AI")
        {
        }

        public static class SiteContainer
        {
            public static CallSite<Func<CallSite, object, object>> p__0;
            public static CallSite<Func<CallSite,  object, object>> p__1;
            public static CallSite<Func<CallSite, int, object, object>> p__2;
            public static CallSite<Func<CallSite, object, bool>> p__3;
            public static CallSite<Func<CallSite, object, object>> p__4;
            public static CallSite<Func<CallSite, object, int, object>> p__5;
            public static CallSite<Func<CallSite, object, object>> p__6;
            public static CallSite<Func<CallSite, object, string>> p__7;
        }



        // Token: 0x06000160 RID: 352 RVA: 0x0000BDFC File Offset: 0x00009FFC
        protected override void RegisterInputParams(GH_Component.GH_InputParamManager pManager)
        {
            pManager.AddTextParameter("APIkey", "APIkey", "Insert here your OpenAI API key or save it in Windows O.S. environment variables as 'OPENAI_API_KEY'", 0, "");
            pManager.AddTextParameter("DirPath", "DirPath", "Path whereby save the images generated by DALL-E", 0);
            pManager.AddTextParameter("Prompt", "Prompt", "Prompt to image instructions - [Default=an happy smiling white cat]", 0, "an happy smiling white cat");
            pManager.AddIntegerParameter("N", "N", "Number of images you want to generate - [Default=1]", 0, 1);
            pManager.AddIntegerParameter("Size", "Size", "Image size: 256, 512 or 1024 (pass only one of these value) - [Default=256]", 0, 256);
            pManager.AddBooleanParameter("start", "start", "Run your Prompt", 0, false);
            pManager[0].MutableNickName = false;
            pManager[1].MutableNickName = false;
            pManager[2].MutableNickName = false;
            pManager[3].MutableNickName = false;
            pManager[4].MutableNickName = false;
            pManager[5].MutableNickName = false;
        }

        // Token: 0x06000161 RID: 353 RVA: 0x0000BEF2 File Offset: 0x0000A0F2
        protected override void RegisterOutputParams(GH_Component.GH_OutputParamManager pManager)
        {
            pManager.AddTextParameter("Output", "Output", "List of the images generated", 0);
            pManager[0].MutableNickName = false;
        }

        // Token: 0x06000162 RID: 354 RVA: 0x0000BF18 File Offset: 0x0000A118
        protected override void BeforeSolveInstance()
        {
            base.BeforeSolveInstance();
            base.Message = "Light version";
            base.MutableNickName = false;
        }

        // Token: 0x06000163 RID: 355 RVA: 0x0000BF34 File Offset: 0x0000A134
        protected override void AppendAdditionalComponentMenuItems(ToolStripDropDown menu)
        {
            base.AppendAdditionalComponentMenuItems(menu);
            GH_DocumentObject.Menu_AppendItem(menu, "AmbrosinusDEV Log", new EventHandler(this.Menu_info_DoClick), Resources.Ambrosinus_DEV_logo_24);
            GH_DocumentObject.Menu_AppendItem(menu, "Project Info", new EventHandler(this.Menu_A_DoClick), Resources.resprj_logo1_24);
            GH_DocumentObject.Menu_AppendItem(menu, "About OpenAI-GH", new EventHandler(this.Menu_B_DoClick), Resources.comps_logo1_24);
        }

        // Token: 0x06000164 RID: 356 RVA: 0x0000BFA0 File Offset: 0x0000A1A0
        private void Menu_info_DoClick(object sender, EventArgs e)
        {
            if (this.myMenu_info = !this.myMenu_info)
            {
                Process.Start("https://ambrosinus.altervista.org/blog/ambrosinus-toolkit/");
            }
        }

        // Token: 0x06000165 RID: 357 RVA: 0x0000BFCC File Offset: 0x0000A1CC
        private void Menu_A_DoClick(object sender, EventArgs e)
        {
            if (this.myMenu_A = !this.myMenu_A)
            {
                Process.Start("https://ambrosinus.altervista.org/blog/atoolkit-research-project/");
            }
        }

        // Token: 0x06000166 RID: 358 RVA: 0x0000BFF8 File Offset: 0x0000A1F8
        private void Menu_B_DoClick(object sender, EventArgs e)
        {
            if (this.myMenu_B = !this.myMenu_B)
            {
                Process.Start("https://ambrosinus.altervista.org/blog/openai-dall-e-inside-grasshopper-with-python/");
            }
        }

        // Token: 0x06000167 RID: 359 RVA: 0x0000C024 File Offset: 0x0000A224
        protected override void SolveInstance(IGH_DataAccess DA)
        {
            string text = "";
            if (!DA.GetData<string>(0, ref text))
            {
                return;
            }
            string text2 = "";
            if (!DA.GetData<string>(1, ref text2))
            {
                return;
            }
            string text3 = "";
            if (!DA.GetData<string>(2, ref text3))
            {
                return;
            }
            int num = 0;
            if (!DA.GetData<int>(3, ref num))
            {
                return;
            }
            int num2 = 0;
            if (!DA.GetData<int>(4, ref num2))
            {
                return;
            }
            bool flag = false;
            if (!DA.GetData<bool>(5, ref flag))
            {
                return;
            }
            string str = "";
            string text4 = "https://api.openai.com/v1/images/generations";
            if (num2 != 256 && num2 != 512 && num2 != 1024)
            {
                this.AddRuntimeMessage((GH_RuntimeMessageLevel)10, "Please, check Size input. DALL-E engine accepts only 256, 512 and 1024px as Size");
            }
            string text5;
            if (string.IsNullOrEmpty(text))
            {
                text5 = Environment.GetEnvironmentVariable("OPENAI_API_KEY");
                this.AddRuntimeMessage((GH_RuntimeMessageLevel)255, "the component will try using your OpenAI API key if stored in environment variables (Windows O.S.)\nOtherwise give it as APIkey input");
            }
            else
            {
                text5 = text;
            }
            if (flag)
            {
                string arg = num.ToString();
                string arg2 = Convert.ToString(num2);
                string text6 = string.Format("{{\"prompt\": \"{0}\",\"n\": {1},\"size\": \"{2}x{2}\",\"response_format\":\"b64_json\"}}", text3, arg, arg2);
                if (text4 == null)
                {
                    return;
                }
                byte[] bytes = Encoding.ASCII.GetBytes(text6);
                HttpWebRequest httpWebRequest = (HttpWebRequest)WebRequest.Create(text4);
                httpWebRequest.Method = "POST";
                httpWebRequest.ContentType = "application/json";
                httpWebRequest.ContentLength = (long)text6.Length;
                if (text5 == null)
                {
                    this.AddRuntimeMessage((GH_RuntimeMessageLevel)20, "There is some issues with API key and/or authentication process");
                    return;
                }
                if (text5.Length > 0)
                {
                    ServicePointManager.Expect100Continue = true;
                    ServicePointManager.SecurityProtocol = SecurityProtocolType.Tls12;
                    httpWebRequest.PreAuthenticate = true;
                    httpWebRequest.Headers.Add("Authorization", "Bearer " + text5);
                }
                else
                {
                    httpWebRequest.Credentials = CredentialCache.DefaultCredentials;
                }
                using (Stream requestStream = httpWebRequest.GetRequestStream())
                {
                    requestStream.Write(bytes, 0, bytes.Length);
                }
                object arg3 = JsonConvert.DeserializeObject(new StreamReader(((HttpWebResponse)httpWebRequest.GetResponse()).GetResponseStream()).ReadToEnd());
                int num3 = 0;
                for (; ; )
                {
                    if (OpenAIDallEreqComponent.SiteContainer. p__3 == null)
                    {
                        OpenAIDallEreqComponent.SiteContainer. p__3 = CallSite<Func<CallSite, object, bool>>.Create(Binder.UnaryOperation(CSharpBinderFlags.None, ExpressionType.IsTrue, typeof(OpenAIDallEreqComponent), new CSharpArgumentInfo[]
                        {
                            CSharpArgumentInfo.Create(CSharpArgumentInfoFlags.None, null)
                        }));
                    }
                    Func<CallSite, object, bool> target = OpenAIDallEreqComponent.SiteContainer. p__3.Target;
                    CallSite p__ = OpenAIDallEreqComponent.SiteContainer. p__3;
                    if (OpenAIDallEreqComponent.SiteContainer. p__2 == null)
                    {
                        OpenAIDallEreqComponent.SiteContainer. p__2 = CallSite<Func<CallSite, int, object, object>>.Create(Binder.BinaryOperation(CSharpBinderFlags.None, ExpressionType.LessThan, typeof(OpenAIDallEreqComponent), new CSharpArgumentInfo[]
                        {
                            CSharpArgumentInfo.Create(CSharpArgumentInfoFlags.UseCompileTimeType, null),
                            CSharpArgumentInfo.Create(CSharpArgumentInfoFlags.None, null)
                        }));
                    }
                    Func<CallSite, int, object, object> target2 = OpenAIDallEreqComponent.SiteContainer. p__2.Target;
                    CallSite p__2 = OpenAIDallEreqComponent.SiteContainer. p__2;
                    int arg4 = num3;
                    if (OpenAIDallEreqComponent.SiteContainer. p__1 == null)
                    {
                        OpenAIDallEreqComponent.SiteContainer. p__1 = CallSite<Func<CallSite, object, object>>.Create(Binder.GetMember(CSharpBinderFlags.None, "Count", typeof(OpenAIDallEreqComponent), new CSharpArgumentInfo[]
                        {
                            CSharpArgumentInfo.Create(CSharpArgumentInfoFlags.None, null)
                        }));
                    }
                    Func<CallSite, object, object> target3 = OpenAIDallEreqComponent.SiteContainer. p__1.Target;
                    CallSite p__3 = OpenAIDallEreqComponent.SiteContainer. p__1;
                    if (OpenAIDallEreqComponent.SiteContainer. p__0 == null)
                    {
                        OpenAIDallEreqComponent.SiteContainer. p__0 = CallSite<Func<CallSite, object, object>>.Create(Binder.GetMember(CSharpBinderFlags.None, "data", typeof(OpenAIDallEreqComponent), new CSharpArgumentInfo[]
                        {
                            CSharpArgumentInfo.Create(CSharpArgumentInfoFlags.None, null)
                        }));
                    }
                    if (!target( p__, target2( p__2, arg4, target3( p__3, OpenAIDallEreqComponent.SiteContainer. p__0.Target(OpenAIDallEreqComponent.SiteContainer. p__0, arg3)))))
                    {
                        break;
                    }
                    if (OpenAIDallEreqComponent.SiteContainer. p__7 == null)
                    {
                        OpenAIDallEreqComponent.SiteContainer. p__7 = CallSite<Func<CallSite, object, string>>.Create(Binder.Convert(CSharpBinderFlags.None, typeof(string), typeof(OpenAIDallEreqComponent)));
                    }
                    Func<CallSite, object, string> target4 = OpenAIDallEreqComponent.SiteContainer. p__7.Target;
                    CallSite p__4 = OpenAIDallEreqComponent.SiteContainer. p__7;
                    if (OpenAIDallEreqComponent.SiteContainer. p__6 == null)
                    {
                        OpenAIDallEreqComponent.SiteContainer. p__6 = CallSite<Func<CallSite, object, object>>.Create(Binder.GetMember(CSharpBinderFlags.None, "b64_json", typeof(OpenAIDallEreqComponent), new CSharpArgumentInfo[]
                        {
                            CSharpArgumentInfo.Create(CSharpArgumentInfoFlags.None, null)
                        }));
                    }
                    Func<CallSite, object, object> target5 = OpenAIDallEreqComponent.SiteContainer. p__6.Target;
                    CallSite p__5 = OpenAIDallEreqComponent.SiteContainer. p__6;
                    if (OpenAIDallEreqComponent.SiteContainer. p__5 == null)
                    {
                        OpenAIDallEreqComponent.SiteContainer. p__5 = CallSite<Func<CallSite, object, int, object>>.Create(Binder.GetIndex(CSharpBinderFlags.None, typeof(OpenAIDallEreqComponent), new CSharpArgumentInfo[]
                        {
                            CSharpArgumentInfo.Create(CSharpArgumentInfoFlags.None, null),
                            CSharpArgumentInfo.Create(CSharpArgumentInfoFlags.UseCompileTimeType, null)
                        }));
                    }
                    Func<CallSite, object, int, object> target6 = OpenAIDallEreqComponent.SiteContainer. p__5.Target;
                    CallSite p__6 = OpenAIDallEreqComponent.SiteContainer. p__5;
                    if (OpenAIDallEreqComponent.SiteContainer. p__4 == null)
                    {
                        OpenAIDallEreqComponent.SiteContainer. p__4 = CallSite<Func<CallSite, object, object>>.Create(Binder.GetMember(CSharpBinderFlags.ResultIndexed, "data", typeof(OpenAIDallEreqComponent), new CSharpArgumentInfo[]
                        {
                            CSharpArgumentInfo.Create(CSharpArgumentInfoFlags.None, null)
                        }));
                    }
                    MemoryStream memoryStream = new MemoryStream(Convert.FromBase64String(target4( p__4, target5( p__5, target6( p__6, OpenAIDallEreqComponent.SiteContainer. p__4.Target(OpenAIDallEreqComponent.SiteContainer. p__4, arg3), num3)))));

                    memoryStream.Position = 0L;
                    Bitmap bitmap = (Bitmap)Image.FromStream(memoryStream);
                    memoryStream.Close();
                    Image image = bitmap;
                    long num4 = DateTimeOffset.Now.ToUnixTimeSeconds();
                    //long num4 = DateTime.Now.Ticks;
                    str = string.Format("img_{0}_n{1}_s{2}", num4, num3 + 1, num2);
                    string str2 = str + ".png";
                    string filename = text2 + "\\" + str2;
                    image.Save(filename);
                    num3++;
                }
                string path = str + ".txt";
                string contents = "Prompt:\n" + text3;
                File.WriteAllText(Path.Combine(text2, path), contents);
            }
            string[] files = Directory.GetFiles(text2, "*.png");
            DA.SetDataList(0, files);
        }

        // Token: 0x17000083 RID: 131
        // (get) Token: 0x06000168 RID: 360 RVA: 0x0000C558 File Offset: 0x0000A758
        public override GH_Exposure Exposure
        {
            get
            {
                return (GH_Exposure)2;
            }
        }

        // Token: 0x17000084 RID: 132
        // (get) Token: 0x06000169 RID: 361 RVA: 0x0000C55B File Offset: 0x0000A75B
        protected override Bitmap Icon
        {
            get
            {
                return Resources.AI_CPython_icon2_24;
            }
        }

        // Token: 0x17000085 RID: 133
        // (get) Token: 0x0600016A RID: 362 RVA: 0x0000C562 File Offset: 0x0000A762
        public override Guid ComponentGuid
        {
            get
            {
                return new Guid("EDA9E30B-2C0C-4FB4-AB7A-54488F62171B");
            }
        }

        // Token: 0x04000052 RID: 82
        public bool myMenu_info;

        // Token: 0x04000053 RID: 83
        public bool myMenu_A;

        // Token: 0x04000054 RID: 84
        public bool myMenu_B;
    }
}
