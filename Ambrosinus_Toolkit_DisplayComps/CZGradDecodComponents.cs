using System;
using System.Collections.Generic;
using System.Diagnostics;
using System.Drawing;
using System.Linq;
using System.Windows.Forms;
using Ambrosinus_Toolkit.Properties;
using Grasshopper.Kernel;

namespace Ambrosinus_Toolkit.DisplayComps
{
    // Token: 0x02000018 RID: 24
    public class CZGradDecodComponents : GH_Component
    {
        // Token: 0x060000DD RID: 221 RVA: 0x00007404 File Offset: 0x00005604
        public CZGradDecodComponents() : base("CZGradDecod", "LA_CZGradDecod", "Decode a custom gradient text generated by ColorZilla site: https://www.colorzilla.com/gradient-editor/\nby Luciano Ambrosini", "Ambrosinus", "1.Display")
        {
        }

        // Token: 0x060000DE RID: 222 RVA: 0x00007425 File Offset: 0x00005625
        protected override void RegisterInputParams(GH_Component.GH_InputParamManager pManager)
        {
            pManager.AddTextParameter("CZText", "CZText", "Assign a CZ text as a list", (GH_ParamAccess)1);
            pManager[0].MutableNickName = false;
        }

        // Token: 0x060000DF RID: 223 RVA: 0x0000744C File Offset: 0x0000564C
        protected override void RegisterOutputParams(GH_Component.GH_OutputParamManager pManager)
        {
            pManager.AddColourParameter("RGB", "RGB", "RGB colours from CZ Text", (GH_ParamAccess)1);
            pManager.AddNumberParameter("GripPos", "GripPos", "Grip points position", (GH_ParamAccess)1);
            pManager[0].MutableNickName = false;
            pManager[1].MutableNickName = false;
        }

        // Token: 0x060000E0 RID: 224 RVA: 0x000074A1 File Offset: 0x000056A1
        protected override void BeforeSolveInstance()
        {
            base.BeforeSolveInstance();
            base.MutableNickName = false;
        }

        // Token: 0x060000E1 RID: 225 RVA: 0x000074B0 File Offset: 0x000056B0
        protected override void AppendAdditionalComponentMenuItems(ToolStripDropDown menu)
        {
            base.AppendAdditionalComponentMenuItems(menu);
            GH_DocumentObject.Menu_AppendItem(menu, "AmbrosinusDEV Log", new EventHandler(this.Menu_info_DoClick), Resources.Ambrosinus_DEV_logo_24);
        }

        // Token: 0x060000E2 RID: 226 RVA: 0x000074D8 File Offset: 0x000056D8
        private void Menu_info_DoClick(object sender, EventArgs e)
        {
            if (this.myMenu_info = !this.myMenu_info)
            {
                Process.Start("https://ambrosinus.altervista.org/blog/ambrosinus-toolkit/");
            }
        }

        // Token: 0x060000E3 RID: 227 RVA: 0x00007504 File Offset: 0x00005704
        protected override void SolveInstance(IGH_DataAccess DA)
        {
            List<string> list = new List<string>();
            if (!DA.GetDataList<string>(0, list))
            {
                return;
            }
            List<string> list2 = new List<string>();
            int count = list.Count;
            char c = '(';
            char c2 = ')';
            List<string> list3 = new List<string>();
            List<string> list4 = new List<string>();
            List<string> list5 = new List<string>();
            List<double> list6 = new List<double>();
            List<Color> list7 = new List<Color>();
            string[] array = list[2].Split(new char[]
            {
                c,
                c2
            }, StringSplitOptions.RemoveEmptyEntries);
            for (int i = 0; i < array.Length; i++)
            {
                double num = (double)i;
                if (i != 0 && i != array.Length - 1 && num % 2.0 == 0.0)
                {
                    list3.Add(array[i]);
                }
                if (i != 0 && i != array.Length - 1 && num % 2.0 != 0.0)
                {
                    list4.Add(array[i]);
                }
            }
            for (int j = 0; j < list4.Count; j++)
            {
                list2 = list4[j].Split(new char[]
                {
                    '%'
                }).ToList<string>();
                list5.Add(list2[0]);
            }
            list5.RemoveAt(0);
            for (int k = 0; k < list5.Count; k++)
            {
                double item = Convert.ToDouble(list5[k]) / 100.0;
                list6.Add(item);
                list7.Add(ColorTranslator.FromHtml(list3[k]));
            }
            List<Color> list8 = new List<Color>();
            List<double> list9 = new List<double>();
            list8 = list7;
            list9 = list6;
            DA.SetDataList(0, list8);
            DA.SetDataList(1, list9);
        }

        // Token: 0x17000062 RID: 98
        // (get) Token: 0x060000E4 RID: 228 RVA: 0x000076B2 File Offset: 0x000058B2
        public override GH_Exposure Exposure
        {
            get
            {
                return (GH_Exposure)4;
            }
        }

        // Token: 0x17000063 RID: 99
        // (get) Token: 0x060000E5 RID: 229 RVA: 0x000076B5 File Offset: 0x000058B5
        protected override Bitmap Icon
        {
            get
            {
                return Resources.CZlogo_24;
            }
        }

        // Token: 0x17000064 RID: 100
        // (get) Token: 0x060000E6 RID: 230 RVA: 0x000076BC File Offset: 0x000058BC
        public override Guid ComponentGuid
        {
            get
            {
                return new Guid("94DF9CB2-0D8D-42D0-91C2-ABD0343AB580");
            }
        }

        // Token: 0x04000035 RID: 53
        public bool myMenu_info;
    }
}
